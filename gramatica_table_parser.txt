start -> inc dec1
inc -> 'importar' STRING ';' inc
inc -> ''
dec1 -> dec dec0
dec0 -> dec1 
dec0 -> ''
dec -> const-dec
dec -> id-dec 
dec -> struct-dec 
dec -> enum-dec
const-dec -> 'const' type ID expr ';'
id-dec -> type ID id-suffix
id-suffix -> func-dec
id-suffix -> var-dec
func-dec -> '(' params ')' func-end
func-end -> ';' 
func-end -> block
var-dec -> id-init var-dec1
var-dec1 -> ';' 
var-dec1 -> ',' ID var-dec
id-init -> '=' expr 
id-init -> ''
struct-dec -> 'estrutura' ID '{' var-decs '}'
var-decs -> id-dec var-decs 
var-decs -> ''
enum-dec -> 'enum' ID '{' ids1 '}'
ids1 -> ID ids0
ids0 -> ',' ids1 
ids0 -> ''
params -> param1 
params -> ''
param1 -> type ID param0
param0 -> ',' param1 
param0 -> ''
type -> basic-type array-type 
type -> '(' type ')'
basic-type -> ID 
basic-type -> 'int' 
basic-type -> 'caractere' 
basic-type -> 'string' 
basic-type -> 'real' 
basic-type -> 'reald' 
basic-type -> 'vazio' 
basic-type -> '*' type
array-type -> '[' expr ']' array-type 
array-type -> ''
block -> '{' stmts '}'
stmts -> stmt stmts 
stmts -> ''
stmt -> dec 
stmt -> if 
stmt -> switch-case 
stmt -> for 
stmt -> while 
stmt -> do-while
stmt -> block
stmt -> expr ';' 
stmt -> return
stmt -> 'parar' ';'
stmt -> 'continuar' ';' 
stmt -> 'irpara' ID ';' 
stmt ->  LABEL
return -> 'retornar' return-expr ';'
return-expr -> expr 
return-expr -> ''
if -> 'se' '(' expr ')' stmt else
else -> 'senao' stmt 
else -> ''
while -> 'enquanto' '(' expr ')' stmt
do-while -> 'faz' stmt 'enquanto' '(' expr ')' ';'
for -> 'para' ID 'de' '(' expr ')' for-expr
for-expr -> for-asc 
for-expr -> for-desc
for-asc -> 'asc' '(' expr ')' stmt
for-desc -> 'desc' '(' expr ')' stmt
switch-case -> 'escolha' '(' expr ')' '{' case1 '}' 
case1 -> case case0
case0 -> case1 
case0 -> ''
case -> 'caso' expr ':' stmts 
case -> 'cc' ':' stmts
expr -> attr ternary
ternary -> '?' expr ':' expr
ternary -> ''
attr -> logor-chain attr-tail
attr-tail -> attr-op logor-chain
attr-tail -> ''
logor-chain -> logand-chain logor-tail
logor-tail -> logor-op logor-chain
logor-tail -> ''
logand-chain -> bitor-chain logand-tail
logand-tail -> logand-op logand-chain
logand-tail -> ''
bitor-chain -> bitand-chain bitor-tail
bitor-tail -> bitor-op bitor-chain
bitor-tail -> ''
bitand-chain -> rel bitand-tail
bitand-tail -> bitand-op bitand-chain
bitand-tail -> ''
rel -> shift-chain rel-tail
rel-tail -> rel-op shift-chain 
rel-tail -> ''
shift-chain -> add-chain shift-tail
shift-tail -> shift-op shift-chain 
shift-tail -> ''
add-chain -> mul-chain add-tail
add-tail -> add-op add-chain
add-tail -> ''
mul-chain -> un-chain mul-tail
mul-tail -> mul-op mul-chain
mul-tail -> ''
un-chain -> un-op un-chain
un-chain -> expr-leaf
expr-leaf -> pre-op expr-leaf
expr-leaf -> var-call
expr-leaf -> expr-lit
expr-leaf -> '(' expr ')'
var-call -> var call 
call -> '(' args ')'
call -> pos-op 
call -> ''
args1 -> expr args0
args0 -> ',' args
args0 -> ''
args -> args1
args -> ''
expr-lit -> INTEIRO
expr-lit -> REAL
expr-lit -> STRING
expr-lit -> CHAR
expr-lit -> array-lit
array-lit -> '{' args1 '}'
var -> ID var-mods
var-mods -> '.' ID var-mods
var-mods -> '[' expr ']' var-mods 
var-mods -> ''
attr-op -> '=' 
attr-op -> '+='
attr-op -> '-='
attr-op -> '*='
attr-op -> '/=' 
attr-op -> 'pipe='
attr-op -> 'or='
attr-op -> '&='
attr-op -> '&&='
attr-op -> '>>='
attr-op -> '<<='
pre-op -> '*'
pre-op -> '&'
pre-op -> '++'
pre-op -> '--'
pos-op -> '++'
pos-op -> '--'
mul-op -> '*'
mul-op -> '/'
mul-op -> '%'
un-op -> '!'
un-op -> '-'
un-op -> '+'
add-op -> '+' 
add-op -> '-'
shift-op -> '<<' 
shift-op -> '>>'
rel-op -> '=='
rel-op -> '!='
rel-op -> '>'
rel-op -> '<'
rel-op -> '>='
rel-op -> '<='
bitand-op -> '&'
bitor-op -> 'pipe'
logand-op -> '&&'
logor-op -> 'or'